// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: proto/ours/consensus/tendermint/types/vote.proto

package types

import (
	types "emulator/proto/ours/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ========== Proposal ========================
type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteType        uint32               `protobuf:"varint,1,opt,name=vote_type,json=voteType,proto3" json:"vote_type,omitempty"`
	Header          *types.PartSetHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	ProposerIndex   int32                `protobuf:"varint,3,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	BlockHeaderHash []byte               `protobuf:"bytes,4,opt,name=block_header_hash,json=blockHeaderHash,proto3" json:"block_header_hash,omitempty"`
	Signature       string               `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_proto_ours_consensus_tendermint_types_vote_proto_rawDescGZIP(), []int{0}
}

func (x *Proposal) GetVoteType() uint32 {
	if x != nil {
		return x.VoteType
	}
	return 0
}

func (x *Proposal) GetHeader() *types.PartSetHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Proposal) GetProposerIndex() int32 {
	if x != nil {
		return x.ProposerIndex
	}
	return 0
}

func (x *Proposal) GetBlockHeaderHash() []byte {
	if x != nil {
		return x.BlockHeaderHash
	}
	return nil
}

func (x *Proposal) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type Prevote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteType        uint32 `protobuf:"varint,1,opt,name=vote_type,json=voteType,proto3" json:"vote_type,omitempty"`
	ValidatorIndex  int32  `protobuf:"varint,2,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Height          int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Round           int32  `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Code            int32  `protobuf:"varint,7,opt,name=code,proto3" json:"code,omitempty"`
	BlockHeaderHash []byte `protobuf:"bytes,5,opt,name=block_header_hash,json=blockHeaderHash,proto3" json:"block_header_hash,omitempty"`
	Signature       string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Prevote) Reset() {
	*x = Prevote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prevote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prevote) ProtoMessage() {}

func (x *Prevote) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prevote.ProtoReflect.Descriptor instead.
func (*Prevote) Descriptor() ([]byte, []int) {
	return file_proto_ours_consensus_tendermint_types_vote_proto_rawDescGZIP(), []int{1}
}

func (x *Prevote) GetVoteType() uint32 {
	if x != nil {
		return x.VoteType
	}
	return 0
}

func (x *Prevote) GetValidatorIndex() int32 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *Prevote) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Prevote) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Prevote) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Prevote) GetBlockHeaderHash() []byte {
	if x != nil {
		return x.BlockHeaderHash
	}
	return nil
}

func (x *Prevote) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type Precommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteType        uint32 `protobuf:"varint,1,opt,name=vote_type,json=voteType,proto3" json:"vote_type,omitempty"`
	ValidatorIndex  int32  `protobuf:"varint,2,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Height          int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Round           int32  `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	BlockHeaderHash []byte `protobuf:"bytes,5,opt,name=block_header_hash,json=blockHeaderHash,proto3" json:"block_header_hash,omitempty"`
	Signature       string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Code            int32  `protobuf:"varint,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Precommit) Reset() {
	*x = Precommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Precommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Precommit) ProtoMessage() {}

func (x *Precommit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Precommit.ProtoReflect.Descriptor instead.
func (*Precommit) Descriptor() ([]byte, []int) {
	return file_proto_ours_consensus_tendermint_types_vote_proto_rawDescGZIP(), []int{2}
}

func (x *Precommit) GetVoteType() uint32 {
	if x != nil {
		return x.VoteType
	}
	return 0
}

func (x *Precommit) GetValidatorIndex() int32 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *Precommit) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Precommit) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Precommit) GetBlockHeaderHash() []byte {
	if x != nil {
		return x.BlockHeaderHash
	}
	return nil
}

func (x *Precommit) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Precommit) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type PrecommitAggregated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteType             uint32               `protobuf:"varint,1,opt,name=vote_type,json=voteType,proto3" json:"vote_type,omitempty"`
	ValidatorBitVector   []byte               `protobuf:"bytes,2,opt,name=validator_bit_vector,json=validatorBitVector,proto3" json:"validator_bit_vector,omitempty"`
	Header               *types.PartSetHeader `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	BlockHeaderHash      []byte               `protobuf:"bytes,4,opt,name=block_header_hash,json=blockHeaderHash,proto3" json:"block_header_hash,omitempty"`
	AggregatedSignatures string               `protobuf:"bytes,5,opt,name=aggregated_signatures,json=aggregatedSignatures,proto3" json:"aggregated_signatures,omitempty"`
	Code                 int32                `protobuf:"varint,6,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *PrecommitAggregated) Reset() {
	*x = PrecommitAggregated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrecommitAggregated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrecommitAggregated) ProtoMessage() {}

func (x *PrecommitAggregated) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrecommitAggregated.ProtoReflect.Descriptor instead.
func (*PrecommitAggregated) Descriptor() ([]byte, []int) {
	return file_proto_ours_consensus_tendermint_types_vote_proto_rawDescGZIP(), []int{3}
}

func (x *PrecommitAggregated) GetVoteType() uint32 {
	if x != nil {
		return x.VoteType
	}
	return 0
}

func (x *PrecommitAggregated) GetValidatorBitVector() []byte {
	if x != nil {
		return x.ValidatorBitVector
	}
	return nil
}

func (x *PrecommitAggregated) GetHeader() *types.PartSetHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PrecommitAggregated) GetBlockHeaderHash() []byte {
	if x != nil {
		return x.BlockHeaderHash
	}
	return nil
}

func (x *PrecommitAggregated) GetAggregatedSignatures() string {
	if x != nil {
		return x.AggregatedSignatures
	}
	return ""
}

func (x *PrecommitAggregated) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type CrossShardProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteType             uint32               `protobuf:"varint,1,opt,name=vote_type,json=voteType,proto3" json:"vote_type,omitempty"`
	ShardType            uint32               `protobuf:"varint,3,opt,name=shard_type,json=shardType,proto3" json:"shard_type,omitempty"`
	AggregatedSignatures *PrecommitAggregated `protobuf:"bytes,2,opt,name=aggregated_signatures,json=aggregatedSignatures,proto3" json:"aggregated_signatures,omitempty"`
}

func (x *CrossShardProposal) Reset() {
	*x = CrossShardProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossShardProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossShardProposal) ProtoMessage() {}

func (x *CrossShardProposal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossShardProposal.ProtoReflect.Descriptor instead.
func (*CrossShardProposal) Descriptor() ([]byte, []int) {
	return file_proto_ours_consensus_tendermint_types_vote_proto_rawDescGZIP(), []int{4}
}

func (x *CrossShardProposal) GetVoteType() uint32 {
	if x != nil {
		return x.VoteType
	}
	return 0
}

func (x *CrossShardProposal) GetShardType() uint32 {
	if x != nil {
		return x.ShardType
	}
	return 0
}

func (x *CrossShardProposal) GetAggregatedSignatures() *PrecommitAggregated {
	if x != nil {
		return x.AggregatedSignatures
	}
	return nil
}

type CrossShardAccept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteType        uint32 `protobuf:"varint,1,opt,name=vote_type,json=voteType,proto3" json:"vote_type,omitempty"`
	UpperChainID    string `protobuf:"bytes,2,opt,name=upper_chainID,json=upperChainID,proto3" json:"upper_chainID,omitempty"`
	AcceptChainID   string `protobuf:"bytes,3,opt,name=accept_chainID,json=acceptChainID,proto3" json:"accept_chainID,omitempty"`
	ValidatorIndex  int32  `protobuf:"varint,4,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Height          int64  `protobuf:"varint,5,opt,name=Height,proto3" json:"Height,omitempty"`
	BlockHeaderHash []byte `protobuf:"bytes,6,opt,name=block_header_hash,json=blockHeaderHash,proto3" json:"block_header_hash,omitempty"`
	CommitStatus    []byte `protobuf:"bytes,7,opt,name=commit_status,json=commitStatus,proto3" json:"commit_status,omitempty"`
	Signature       string `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *CrossShardAccept) Reset() {
	*x = CrossShardAccept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossShardAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossShardAccept) ProtoMessage() {}

func (x *CrossShardAccept) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossShardAccept.ProtoReflect.Descriptor instead.
func (*CrossShardAccept) Descriptor() ([]byte, []int) {
	return file_proto_ours_consensus_tendermint_types_vote_proto_rawDescGZIP(), []int{5}
}

func (x *CrossShardAccept) GetVoteType() uint32 {
	if x != nil {
		return x.VoteType
	}
	return 0
}

func (x *CrossShardAccept) GetUpperChainID() string {
	if x != nil {
		return x.UpperChainID
	}
	return ""
}

func (x *CrossShardAccept) GetAcceptChainID() string {
	if x != nil {
		return x.AcceptChainID
	}
	return ""
}

func (x *CrossShardAccept) GetValidatorIndex() int32 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *CrossShardAccept) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CrossShardAccept) GetBlockHeaderHash() []byte {
	if x != nil {
		return x.BlockHeaderHash
	}
	return nil
}

func (x *CrossShardAccept) GetCommitStatus() []byte {
	if x != nil {
		return x.CommitStatus
	}
	return nil
}

func (x *CrossShardAccept) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type CrossShardCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteType                uint32   `protobuf:"varint,1,opt,name=vote_type,json=voteType,proto3" json:"vote_type,omitempty"`
	UpperChainID            string   `protobuf:"bytes,2,opt,name=upper_chainID,json=upperChainID,proto3" json:"upper_chainID,omitempty"`
	Height                  int64    `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty"`
	BlockHeaderHash         []byte   `protobuf:"bytes,4,opt,name=block_header_hash,json=blockHeaderHash,proto3" json:"block_header_hash,omitempty"`
	ChainList               []string `protobuf:"bytes,5,rep,name=chain_list,json=chainList,proto3" json:"chain_list,omitempty"`
	AggregatedSignatureList []string `protobuf:"bytes,6,rep,name=aggregated_signature_list,json=aggregatedSignatureList,proto3" json:"aggregated_signature_list,omitempty"`
	ValidatorBitVectorList  [][]byte `protobuf:"bytes,7,rep,name=validator_bit_vector_list,json=validatorBitVectorList,proto3" json:"validator_bit_vector_list,omitempty"`
	CommitStatusList        [][]byte `protobuf:"bytes,8,rep,name=commit_status_list,json=commitStatusList,proto3" json:"commit_status_list,omitempty"`
}

func (x *CrossShardCommit) Reset() {
	*x = CrossShardCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossShardCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossShardCommit) ProtoMessage() {}

func (x *CrossShardCommit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossShardCommit.ProtoReflect.Descriptor instead.
func (*CrossShardCommit) Descriptor() ([]byte, []int) {
	return file_proto_ours_consensus_tendermint_types_vote_proto_rawDescGZIP(), []int{6}
}

func (x *CrossShardCommit) GetVoteType() uint32 {
	if x != nil {
		return x.VoteType
	}
	return 0
}

func (x *CrossShardCommit) GetUpperChainID() string {
	if x != nil {
		return x.UpperChainID
	}
	return ""
}

func (x *CrossShardCommit) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CrossShardCommit) GetBlockHeaderHash() []byte {
	if x != nil {
		return x.BlockHeaderHash
	}
	return nil
}

func (x *CrossShardCommit) GetChainList() []string {
	if x != nil {
		return x.ChainList
	}
	return nil
}

func (x *CrossShardCommit) GetAggregatedSignatureList() []string {
	if x != nil {
		return x.AggregatedSignatureList
	}
	return nil
}

func (x *CrossShardCommit) GetValidatorBitVectorList() [][]byte {
	if x != nil {
		return x.ValidatorBitVectorList
	}
	return nil
}

func (x *CrossShardCommit) GetCommitStatusList() [][]byte {
	if x != nil {
		return x.CommitStatusList
	}
	return nil
}

var File_proto_ours_consensus_tendermint_types_vote_proto protoreflect.FileDescriptor

var file_proto_ours_consensus_tendermint_types_vote_proto_rawDesc = []byte{
	0x0a, 0x30, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x75, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1f, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x75, 0x72, 0x73, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcb, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x75, 0x72,
	0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x53, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xdb,
	0x01, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76,
	0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xdd, 0x01, 0x0a,
	0x09, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76,
	0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x02, 0x0a,
	0x13, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62,
	0x69, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x74, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x12,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x69,
	0x0a, 0x15, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6f, 0x75, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x10, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x70, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x75, 0x70, 0x70, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x30, 0x5a, 0x2e, 0x65, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x75, 0x72, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ours_consensus_tendermint_types_vote_proto_rawDescOnce sync.Once
	file_proto_ours_consensus_tendermint_types_vote_proto_rawDescData = file_proto_ours_consensus_tendermint_types_vote_proto_rawDesc
)

func file_proto_ours_consensus_tendermint_types_vote_proto_rawDescGZIP() []byte {
	file_proto_ours_consensus_tendermint_types_vote_proto_rawDescOnce.Do(func() {
		file_proto_ours_consensus_tendermint_types_vote_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ours_consensus_tendermint_types_vote_proto_rawDescData)
	})
	return file_proto_ours_consensus_tendermint_types_vote_proto_rawDescData
}

var file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_ours_consensus_tendermint_types_vote_proto_goTypes = []any{
	(*Proposal)(nil),            // 0: ours.consensus.tendermint.types.Proposal
	(*Prevote)(nil),             // 1: ours.consensus.tendermint.types.Prevote
	(*Precommit)(nil),           // 2: ours.consensus.tendermint.types.Precommit
	(*PrecommitAggregated)(nil), // 3: ours.consensus.tendermint.types.PrecommitAggregated
	(*CrossShardProposal)(nil),  // 4: ours.consensus.tendermint.types.CrossShardProposal
	(*CrossShardAccept)(nil),    // 5: ours.consensus.tendermint.types.CrossShardAccept
	(*CrossShardCommit)(nil),    // 6: ours.consensus.tendermint.types.CrossShardCommit
	(*types.PartSetHeader)(nil), // 7: ours.types.PartSetHeader
}
var file_proto_ours_consensus_tendermint_types_vote_proto_depIdxs = []int32{
	7, // 0: ours.consensus.tendermint.types.Proposal.header:type_name -> ours.types.PartSetHeader
	7, // 1: ours.consensus.tendermint.types.PrecommitAggregated.header:type_name -> ours.types.PartSetHeader
	3, // 2: ours.consensus.tendermint.types.CrossShardProposal.aggregated_signatures:type_name -> ours.consensus.tendermint.types.PrecommitAggregated
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_ours_consensus_tendermint_types_vote_proto_init() }
func file_proto_ours_consensus_tendermint_types_vote_proto_init() {
	if File_proto_ours_consensus_tendermint_types_vote_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Prevote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Precommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PrecommitAggregated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CrossShardProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CrossShardAccept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CrossShardCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ours_consensus_tendermint_types_vote_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_ours_consensus_tendermint_types_vote_proto_goTypes,
		DependencyIndexes: file_proto_ours_consensus_tendermint_types_vote_proto_depIdxs,
		MessageInfos:      file_proto_ours_consensus_tendermint_types_vote_proto_msgTypes,
	}.Build()
	File_proto_ours_consensus_tendermint_types_vote_proto = out.File
	file_proto_ours_consensus_tendermint_types_vote_proto_rawDesc = nil
	file_proto_ours_consensus_tendermint_types_vote_proto_goTypes = nil
	file_proto_ours_consensus_tendermint_types_vote_proto_depIdxs = nil
}
